import React from 'react';
import { View, Text, TouchableOpacity, ScrollView, Alert } from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import * as Clipboard from 'expo-clipboard';
import * as Print from 'expo-print';
import * as Sharing from 'expo-sharing';
import { useFeedStore } from '../lib/store';
import { useToast } from './Toast';
import { formatErrorForUser, logError } from '../../shared/utils/errorHandling';
import { calculateFeedCost } from '../../shared/utils/feedCalculator';
import { calculateOptimalTemperature } from '../../shared/utils/temperatureCalculator';
import NotificationButton from './NotificationButton';

export default function FeedResults() {
  const { results, feedingSchedule, bestPractices, birdType, breed, ageInDays, quantity, rearingStyle } = useFeedStore();
  const { addToast } = useToast();

  // Calculate optimal temperature range
  const optimalTemperature = calculateOptimalTemperature({
    birdType,
    breed,
    ageInDays
  });

  if (!results) {
    return (
      <View className="flex-1 items-center justify-center py-12">
        <Ionicons name="analytics-outline" size={64} color="#94a3b8" />
        <Text className="text-mobile-lg font-medium text-neutral-600 mt-4 mb-2">
          No Results Yet
        </Text>
        <Text className="text-neutral-500 text-center">
          Calculate feed requirements to see results here.
        </Text>
      </View>
    );
  }

  const copyToClipboard = async () => {
    try {
      const resultText = `
Poultry Feed Calculation Results
================================

Bird Details:
- Type: ${birdType}
- Breed: ${breed}
- Age: ${ageInDays} days (${Math.floor(ageInDays / 7)} weeks)
- Quantity: ${quantity} birds
- Rearing Style: ${rearingStyle}

Feed Requirements:
- Per Bird: ${results.perBirdDailyFeed}g (${results.perBirdDailyCups} cups)
- Total Daily: ${results.totalDailyFeed}g (${results.totalDailyCups} cups)
- Weekly Total: ${(results.totalDailyFeed * 7).toLocaleString()}g

Feeding Schedule:
${feedingSchedule.map(meal => `- ${meal.time}: ${meal.amount}g (${meal.cups} cups)`).join('\n')}

Best Practices:
${bestPractices.map(practice => `- ${practice}`).join('\n')}

Generated by Poultry Feed Calculator
`;

      await Clipboard.setStringAsync(resultText);
      addToast({
        type: 'success',
        message: 'Results copied to clipboard!'
      });
    } catch (error) {
      logError(error, 'Failed to copy to clipboard');
      const friendly = formatErrorForUser(error);
      addToast({
        type: 'error',
        message: friendly.message
      });
    }
  };

  const printResults = async () => {
    const htmlContent = `
      <html>
        <head>
          <style>
            body { font-family: Arial, sans-serif; margin: 20px; }
            .header { text-align: center; margin-bottom: 30px; }
            .section { margin-bottom: 25px; }
            .section h3 { color: #0284c7; border-bottom: 2px solid #0284c7; padding-bottom: 5px; }
            .grid { display: grid; grid-template-columns: 1fr 1fr; gap: 20px; }
            .card { border: 1px solid #e5e5e5; padding: 15px; border-radius: 8px; }
            .highlight { background-color: #f0f9ff; padding: 10px; border-radius: 5px; }
            ul { padding-left: 20px; }
            li { margin-bottom: 5px; }
          </style>
        </head>
        <body>
          <div class="header">
            <h1>Poultry Feed Calculation Results</h1>
            <p>Generated on ${new Date().toLocaleDateString()}</p>
          </div>
          
          <div class="section">
            <h3>Bird Details</h3>
            <div class="grid">
              <div><strong>Type:</strong> ${birdType}</div>
              <div><strong>Breed:</strong> ${breed}</div>
              <div><strong>Age:</strong> ${ageInDays} days (${Math.floor(ageInDays / 7)} weeks)</div>
              <div><strong>Quantity:</strong> ${quantity} birds</div>
              <div><strong>Rearing Style:</strong> ${rearingStyle}</div>
            </div>
          </div>
          
          <div class="section">
            <h3>Feed Requirements</h3>
            <div class="highlight">
              <div class="grid">
                <div><strong>Per Bird Daily:</strong> ${results.perBirdDailyFeed}g (${results.perBirdDailyCups} cups)</div>
                <div><strong>Total Daily:</strong> ${results.totalDailyFeed}g (${results.totalDailyCups} cups)</div>
                <div><strong>Weekly Total:</strong> ${(results.totalDailyFeed * 7).toLocaleString()}g</div>
                <div><strong>Monthly Total:</strong> ${(results.totalDailyFeed * 30).toLocaleString()}g</div>
              </div>
            </div>
          </div>
          
          <div class="section">
            <h3>Feeding Schedule</h3>
            <ul>
              ${feedingSchedule.map(meal => `<li><strong>${meal.time}:</strong> ${meal.amount}g (${meal.cups} cups)</li>`).join('')}
            </ul>
          </div>
          
          <div class="section">
            <h3>Best Practices</h3>
            <ul>
              ${bestPractices.map(practice => `<li>${practice}</li>`).join('')}
            </ul>
          </div>
        </body>
      </html>
    `;

    try {
      const { uri } = await Print.printToFileAsync({ html: htmlContent });
      await Sharing.shareAsync(uri);
      addToast({
        type: 'success',
        message: 'PDF generated and shared successfully!'
      });
    } catch (error) {
      logError(error, 'Failed to generate PDF', { birdType, breed, quantity });
      const friendly = formatErrorForUser(error);
      addToast({
        type: 'error',
        message: friendly.message
      });
    }
  };

  return (
    <ScrollView className="flex-1" showsVerticalScrollIndicator={false}>
      <View className="space-y-6">
        {/* Header */}
        <View className="text-center">
          <View className="w-16 h-16 bg-success-100 rounded-2xl items-center justify-center mx-auto mb-4">
            <Ionicons name="analytics" size={32} color="#16a34a" />
          </View>
          <Text className="text-mobile-2xl font-bold text-neutral-900 mb-2">
            Feed Results
          </Text>
          <Text className="text-neutral-600">
            {birdType} ‚Ä¢ {quantity} birds ‚Ä¢ {ageInDays} days old
          </Text>
        </View>

        {/* Quick Summary */}
        <View className="card bg-gradient-to-r from-primary-50 to-secondary-50">
          <Text className="text-mobile-lg font-semibold text-neutral-900 mb-4">
            üìä Daily Feed Summary
          </Text>
          
          <View className="space-y-3">
            <View className="flex-row justify-between items-center">
              <Text className="text-neutral-700">Per Bird:</Text>
              <Text className="text-mobile-lg font-bold text-primary-600">
                {results.perBirdDailyFeed}g ({results.perBirdDailyCups} cups)
              </Text>
            </View>
            
            <View className="flex-row justify-between items-center">
              <Text className="text-neutral-700">Total Daily:</Text>
              <Text className="text-mobile-lg font-bold text-primary-600">
                {results.totalDailyFeed}g ({results.totalDailyCups} cups)
              </Text>
            </View>
            
            <View className="h-px bg-neutral-200 my-2" />
            
            <View className="flex-row justify-between items-center">
              <Text className="text-neutral-700">Weekly Total:</Text>
              <Text className="text-mobile-base font-semibold text-neutral-900">
                {(results.totalDailyFeed * 7).toLocaleString()}g
              </Text>
            </View>

            {/* Temperature Range */}
            <View className="mt-4 p-3 bg-orange-50 rounded-mobile-lg border border-orange-200">
              <View className="flex-row items-center mb-2">
                <Ionicons name="thermometer" size={16} color="#ea580c" />
                <Text className="text-mobile-sm font-semibold text-orange-900 ml-2">
                  Optimal Temperature
                </Text>
              </View>
              <Text className="text-mobile-base font-bold text-orange-900">
                {optimalTemperature.min}¬∞-{optimalTemperature.max}¬∞C
              </Text>
              <Text className="text-mobile-xs text-orange-700 mt-1">
                {optimalTemperature.description}
              </Text>
              <Text className="text-mobile-xs text-orange-600 mt-1">
                {optimalTemperature.stage === 'brooding'
                  ? `Week ${optimalTemperature.week}: Reduce by 3¬∞C weekly`
                  : optimalTemperature.stage === 'growing'
                  ? 'Monitor temperature stress signs'
                  : 'Maintain consistent conditions'}
              </Text>
            </View>
          </View>
        </View>

        {/* Feeding Schedule */}
        <View className="card">
          <Text className="text-mobile-lg font-semibold text-neutral-900 mb-4">
            üïê Feeding Schedule
          </Text>
          
          <View className="space-y-3">
            {feedingSchedule.map((meal, index) => (
              <View key={index} className="flex-row items-center justify-between p-3 bg-neutral-50 rounded-mobile">
                <View className="flex-row items-center">
                  <View className="w-8 h-8 bg-accent-200 rounded-full items-center justify-center mr-3">
                    <Text className="text-mobile-xs font-bold text-accent-800">
                      {index + 1}
                    </Text>
                  </View>
                  <Text className="text-mobile-base font-medium text-neutral-900">
                    {meal.time}
                  </Text>
                </View>
                
                <View className="items-end">
                  <Text className="text-mobile-base font-semibold text-neutral-900">
                    {meal.amount}g
                  </Text>
                  <Text className="text-mobile-sm text-neutral-600">
                    {meal.cups} cups
                  </Text>
                </View>
              </View>
            ))}
          </View>
        </View>

        {/* Notification Button */}
        <NotificationButton 
          feedingSchedule={feedingSchedule}
          birdDetails={{
            type: birdType,
            breed: breed,
            age: ageInDays,
            quantity: quantity,
            rearingStyle: rearingStyle
          }}
          onNotificationScheduled={(count) => {
            // Optional: Track notification scheduling analytics
            console.log(`Scheduled ${count} feeding reminders`);
          }}
        />

        {/* Best Practices */}
        <View className="card">
          <Text className="text-mobile-lg font-semibold text-neutral-900 mb-4">
            ‚úÖ Best Practices
          </Text>
          
          <View className="space-y-3">
            {bestPractices.map((practice, index) => (
              <View key={index} className="flex-row items-start">
                <View className="w-2 h-2 bg-success-500 rounded-full mt-2 mr-3" />
                <Text className="flex-1 text-mobile-sm text-neutral-700 leading-relaxed">
                  {practice}
                </Text>
              </View>
            ))}
          </View>
        </View>

        {/* Action Buttons */}
        <View className="space-y-3">
          <TouchableOpacity
            onPress={copyToClipboard}
            className="btn-outline flex-row items-center justify-center"
          >
            <Ionicons name="copy-outline" size={20} color="#0284c7" />
            <Text className="text-primary-600 font-medium ml-2">
              Copy Results
            </Text>
          </TouchableOpacity>
          
          <TouchableOpacity
            onPress={printResults}
            className="btn-secondary flex-row items-center justify-center"
          >
            <Ionicons name="print-outline" size={20} color="#475569" />
            <Text className="text-secondary-700 font-medium ml-2">
              Export as PDF
            </Text>
          </TouchableOpacity>
        </View>

        {/* Additional Info */}
        <View className="bg-accent-50 rounded-mobile-lg p-4 border border-accent-200">
          <View className="flex-row items-start">
            <Ionicons name="information-circle" size={20} color="#ca8a04" />
            <View className="ml-3 flex-1">
              <Text className="text-mobile-sm font-medium text-accent-800 mb-2">
                Important Notes
              </Text>
              <Text className="text-mobile-xs text-accent-700 leading-relaxed">
                ‚Ä¢ These calculations are estimates based on standard requirements{"\n"}
                ‚Ä¢ Monitor your birds' actual consumption and adjust accordingly{"\n"}
                ‚Ä¢ Ensure fresh water is always available{"\n"}
                ‚Ä¢ Consult a veterinarian for specific health concerns
              </Text>
            </View>
          </View>
        </View>
      </View>
    </ScrollView>
  );
}